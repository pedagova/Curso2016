package missionaryCannibal;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

import aima.core.search.framework.GraphSearch;
import aima.core.search.framework.Problem;
import aima.core.search.framework.Search;
import aima.core.search.framework.SearchAgent;
import aima.core.search.informed.AStarSearch;

public class MCPuzzleReportedSearchDemo extends MCPuzzleDemo{

	public static void main(String[] args) throws FileNotFoundException {
		System.setOut(new PrintStream(new FileOutputStream("MC_salida_normal.txt")));
		System.setErr(new PrintStream(new FileOutputStream("MC_salida_error.txt")));
		
		missionaryCannibalDSLDemo();
		missionaryCannibalIDLSDemo();
		//missionaryCannibalGreedyBestFirstDemo();
		//missionaryCannibalGreedyBestFirstManhattanDemo();
		//missionaryCannibalAStarDemo();
		//missionaryCannibalAStarHeu1Demo();
		//missionaryCannibalSimulatedAnnealingDemo();
	}
	
	/*private static void eightPuzzleGreedyBestFirstDemo() {
	System.out
			.println("\nMissionary Cannibal Greedy Best First Search (MisplacedTileHeursitic)-->");
	try {
		Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
				.getActionsFunction(), MissionaryCannibalFunctionFactory
				.getResultFunction(), new MissionaryCannibalGoalTest());
		Search search = new GreedyBestFirstSearch(new GraphSearch(),
				new MisplacedTilleHeuristicFunction());
		SearchAgent agent = new SearchAgent(problem, search);
		printActions(agent.getActions());
		printInstrumentation(agent.getInstrumentation());
	} catch (Exception e) {
		e.printStackTrace();
	}

}*/

/*private static void eightPuzzleGreedyBestFirstManhattanDemo() {
	System.out
			.println("\nMissionary Cannibal Greedy Best First Search (ManhattanHeursitic)-->");
	try {
		Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
				.getActionsFunction(), MissionaryCannibalFunctionFactory
				.getResultFunction(), new MissionaryCannibalGoalTest());
		Search search = new GreedyBestFirstSearch(new GraphSearch(),
				new ManhattanHeuristicFunction());
		SearchAgent agent = new SearchAgent(problem, search);
		printActions(agent.getActions());
		printInstrumentation(agent.getInstrumentation());
	} catch (Exception e) {
		e.printStackTrace();
	}

}*/

/*private static void eightPuzzleAStarDemo() {
	System.out
			.println("\nMissionary Cannibal AStar Search (MisplacedTileHeursitic)-->");
	try {
		Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
				.getActionsFunction(), MissionaryCannibalFunctionFactory
				.getResultFunction(), new MissionaryCannibalGoalTest());
		Search search = new AStarSearch(new GraphSearch(),
				new MisplacedTilleHeuristicFunction());
		SearchAgent agent = new SearchAgent(problem, search);
		printActions(agent.getActions());
		printInstrumentation(agent.getInstrumentation());
	} catch (Exception e) {
		e.printStackTrace();
	}

}*/

/*private static void eightPuzzleSimulatedAnnealingDemo() {
	System.out.println("\nMissionary Cannibal Simulated Annealing  Search -->");
	try {
		Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
				.getActionsFunction(), MissionaryCannibalFunctionFactory
				.getResultFunction(), new MissionaryCannibalGoalTest());
		SimulatedAnnealingSearch search = new SimulatedAnnealingSearch(
				new ManhattanHeuristicFunction());
		SearchAgent agent = new SearchAgent(problem, search);
		printActions(agent.getActions());
		System.out.println("Search Outcome=" + search.getOutcome());
		System.out.println("Final State=\n" + search.getLastSearchState());
		printInstrumentation(agent.getInstrumentation());
	} catch (Exception e) {
		e.printStackTrace();
	}
}*/

private static void missionaryCannibalAStarHeu1Demo() {
	System.out
			.println("\nMissionary Cannibal AStar Search (Heu1)-->");
	try {
		Problem problem = new Problem(basicBoard, MCPuzzleFunctionFactory
				.getActionsFunction(), MCPuzzleFunctionFactory
				.getResultFunction(), new MCPuzzleGoalTest());
		Search search = new AStarSearch(new GraphSearch(),
				new MCPuzzleHeuristic1());
		SearchAgent agent = new SearchAgent(problem, search);
		printActions(agent.getActions());
		printInstrumentation(agent.getInstrumentation());
	} catch (Exception e) {
		e.printStackTrace();
	}

}
}
