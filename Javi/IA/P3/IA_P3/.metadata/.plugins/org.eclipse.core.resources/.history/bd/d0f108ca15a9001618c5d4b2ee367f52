package blackWhitePuzzle;

import aima.core.agent.Action;
import aima.core.agent.impl.DynamicAction;

public class BWPuzzleBoard {

	public static Action WHITE_ADY = new DynamicAction("White_ady","");
	public static Action WHITE_ONE = new DynamicAction("White_1");
	public static Action WHITE_TWO = new DynamicAction("White_2");

	public static Action BLACK_ADY = new DynamicAction("Black_ady");
	public static Action BLACK_ONE = new DynamicAction("Black_1");
	public static Action BLACK_TWO = new DynamicAction("Black_2");

	private Piece[] state;

	//
	// PUBLIC METHODS
	//

	public BWPuzzleBoard() {
		state = new Piece[] { Piece.BLACK, Piece.BLACK, Piece.BLACK,
				Piece.HOLE, Piece.WHITE, Piece.WHITE, Piece.WHITE };
	}

	public BWPuzzleBoard(Piece[] state) {
		this.state = new Piece[state.length];
		System.arraycopy(state, 0, this.state, 0, state.length);
	}
	
	public BWPuzzleBoard(BWPuzzleBoard board) {
		this(board.getState());
	}

	/*public BWPuzzleBoard(BWPuzzleBoard copyBoard) {
		this(copyBoard.getState());
	}*/

	public Piece[] getState() {
		return state;
	}

	public void moveWhiteAdy(int position) {
		state[position - 1] = state[position];
		state[position] = Piece.HOLE;
	}

	public void moveWhiteOne(int position) {
		state[position - 2] = state[position];
		state[position] = Piece.HOLE;
	}

	public void moveWhiteTwo(int position) {
		state[position - 3] = state[position];
		state[position] = Piece.HOLE;
	}

	public void moveBlackAdy(int position) {
		state[position + 1] = state[position];
		state[position] = Piece.HOLE;
	}

	public void moveBlackOne(int position) {
		state[position + 2] = state[position];
		state[position] = Piece.HOLE;

	}
	public void moveBlackTwo(int position) {
		state[position + 3] = state[position];
		state[position] = Piece.HOLE;
	}

	public boolean canMovePiece(Action where, int ini) {
		if (where.equals(WHITE_ADY) && validLocation(ini, -1))
			return true;
		else if (where.equals(WHITE_ONE) && validLocation(ini, -2))
			return true;
		else if (where.equals(WHITE_TWO) && validLocation(ini, -3))
			return true;
		else if (where.equals(BLACK_ADY) && validLocation(ini, 1))
			return true;
		else if (where.equals(BLACK_ONE) && validLocation(ini, 2))
			return true;
		else if (where.equals(BLACK_TWO) && validLocation(ini, 3))
			return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {

		if (this == o) {
			return true;
		}
		if ((o == null) || (this.getClass() != o.getClass())) {
			return false;
		}
		BWPuzzleBoard aBoard = (BWPuzzleBoard) o;

		for (int i = 0; i < 7; i++) {
			if (this.state[i] != aBoard.state[i]) {
				return false;
			}
		}
		return true;
	}

	@Override
	public int hashCode() {
		int result = 0;
		for (int i = 0; i < 7; i++) {
			result = (int)Math.pow(10, i) * result + this.state[i].getValue();
		}
		return result;
	}

	@Override
	public String toString() {
		StringBuilder chain = new StringBuilder();
		chain.append("[ ");
		for (int i = 0; i < 7; i++) {
			chain.append(state[i].toString() + " ");
		}
		chain.append("]");
		return chain.toString();
	}

	//
	// PRIVATE METHODS
	//

	private boolean validLocation(int position, int modifier) {
		return (state[position + modifier] == Piece.HOLE
				&& 0 <= position + modifier && position + modifier < state.length);
	}

}
