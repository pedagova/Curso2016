package missionaryCannibal;

import java.io.FileNotFoundException;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import aima.core.agent.Action;
import aima.core.search.framework.GraphSearch;
import aima.core.search.framework.Problem;
import aima.core.search.framework.Search;
import aima.core.search.framework.SearchAgent;
import aima.core.search.informed.AStarSearch;
import aima.core.search.uninformed.DepthLimitedSearch;
import aima.core.search.uninformed.IterativeDeepeningSearch;

public class MCPuzzleDemo {
	
	static MCPuzzleBoard basicBoard = new MCPuzzleBoard();

	public static void main(String[] args) throws FileNotFoundException {
		//System.setOut(new PrintStream(new FileOutputStream("salida_normal.txt")));
		//System.setErr(new PrintStream(new FileOutputStream("salida_error.txt")));
		
		missionaryCannibalDSLDemo();
		missionaryCannibalIDLSDemo();
		//missionaryCannibalGreedyBestFirstDemo();
		//missionaryCannibalGreedyBestFirstManhattanDemo();
		//missionaryCannibalAStarDemo();
		missionaryCannibalAStarHeu1Demo();
		//missionaryCannibalSimulatedAnnealingDemo();
	}

	private static void missionaryCannibalDSLDemo() {
		System.out.println("\nMissionary Cannibal recursive DLS (3) -->");
		try {
			Problem problem = new Problem(basicBoard, MCPuzzleFunctionFactory
					.getActionsFunction(), MCPuzzleFunctionFactory
					.getResultFunction(), new MCPuzzleGoalTest());
			Search search = new DepthLimitedSearch(3);
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void missionaryCannibalIDLSDemo() {
		System.out.println("\nMissionary Cannibal Iterative DLS -->");
		try {
			Problem problem = new Problem(basicBoard, MCPuzzleFunctionFactory
					.getActionsFunction(), MCPuzzleFunctionFactory
					.getResultFunction(), new MCPuzzleGoalTest());
			Search search = new IterativeDeepeningSearch();
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/*private static void eightPuzzleGreedyBestFirstDemo() {
		System.out
				.println("\nMissionary Cannibal Greedy Best First Search (MisplacedTileHeursitic)-->");
		try {
			Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
					.getActionsFunction(), MissionaryCannibalFunctionFactory
					.getResultFunction(), new MissionaryCannibalGoalTest());
			Search search = new GreedyBestFirstSearch(new GraphSearch(),
					new MisplacedTilleHeuristicFunction());
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}*/

	/*private static void eightPuzzleGreedyBestFirstManhattanDemo() {
		System.out
				.println("\nMissionary Cannibal Greedy Best First Search (ManhattanHeursitic)-->");
		try {
			Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
					.getActionsFunction(), MissionaryCannibalFunctionFactory
					.getResultFunction(), new MissionaryCannibalGoalTest());
			Search search = new GreedyBestFirstSearch(new GraphSearch(),
					new ManhattanHeuristicFunction());
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}*/

	/*private static void eightPuzzleAStarDemo() {
		System.out
				.println("\nMissionary Cannibal AStar Search (MisplacedTileHeursitic)-->");
		try {
			Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
					.getActionsFunction(), MissionaryCannibalFunctionFactory
					.getResultFunction(), new MissionaryCannibalGoalTest());
			Search search = new AStarSearch(new GraphSearch(),
					new MisplacedTilleHeuristicFunction());
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}*/

	/*private static void eightPuzzleSimulatedAnnealingDemo() {
		System.out.println("\nMissionary Cannibal Simulated Annealing  Search -->");
		try {
			Problem problem = new Problem(basicBoard, MissionaryCannibalFunctionFactory
					.getActionsFunction(), MissionaryCannibalFunctionFactory
					.getResultFunction(), new MissionaryCannibalGoalTest());
			SimulatedAnnealingSearch search = new SimulatedAnnealingSearch(
					new ManhattanHeuristicFunction());
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			System.out.println("Search Outcome=" + search.getOutcome());
			System.out.println("Final State=\n" + search.getLastSearchState());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}*/

	private static void missionaryCannibalAStarHeu1Demo() {
		System.out
				.println("\nMissionary Cannibal AStar Search (Heu1)-->");
		try {
			Problem problem = new Problem(basicBoard, MCPuzzleFunctionFactory
					.getActionsFunction(), MCPuzzleFunctionFactory
					.getResultFunction(), new MCPuzzleGoalTest());
			Search search = new AStarSearch(new GraphSearch(),
					new MissionaryCannibalHeuristic1());
			SearchAgent agent = new SearchAgent(problem, search);
			printActions(agent.getActions());
			printInstrumentation(agent.getInstrumentation());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void printInstrumentation(Properties properties) {
		Iterator<Object> keys = properties.keySet().iterator();
		while (keys.hasNext()) {
			String key = (String) keys.next();
			String property = properties.getProperty(key);
			System.out.println(key + " : " + property);
		}

	}

	private static void printActions(List<Action> actions) {
		for (int i = 0; i < actions.size(); i++) {
			String action = actions.get(i).toString();
			System.out.println(action);
		}
	}

}
